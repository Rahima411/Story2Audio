syntax = "proto3";

package tts;

// TTS service definition
service TTSService {
  // Basic TTS inference (unary)
  rpc Generate (TextRequest) returns (AudioReply) {}

  // Server streaming response (streaming audio back in chunks)
  rpc StreamGenerate (TextRequest) returns (stream AudioReply) {}

  // Bidirectional streaming (for advanced interactive use cases)
  rpc ChatTTS (stream TextRequest) returns (stream AudioReply) {}
}

// Input message: text for TTS
message TextRequest {
  string text = 1;
  string voice = 2;
  string message_id = 3;
}

// Output message: TTS audio (e.g., raw PCM, or WAV bytes)
message AudioReply {
  bytes audio_data = 1;
  string format = 2;     // e.g., "wav", "mp3"
  repeated string chunks = 3;  // The text chunks that were processed
  float time_taken = 4;  // Time taken to generate the audio in seconds
  int32 chunk_index = 5; // For streaming, the index of this chunk
  int32 total_chunks = 6; // For streaming, the total number of chunks
  string message_id = 7;  // For chat, matches the request message_id
}
